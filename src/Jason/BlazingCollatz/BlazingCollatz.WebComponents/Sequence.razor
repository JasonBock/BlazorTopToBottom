@using Blazored.LocalStorage
@using Collatz
@using System.IO
@using System.Numerics

@page "/sequence"
@page "/sequence/{start}"

@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage
@inject NavigationManager manager
<h1>Sequence</h1>

<Geolocation />
<InputFile OnChange="this.OnInputFileChange" />
<p>
    <input type="text" @bind="this.Start" />
    <button class="btn btn-primary" @onclick="this.CreateSequenceAsync">Create Sequence</button>
</p>
<p id="currentSequence">Current sequence: @this.currentSequence</p>

<canvas @ref=chartReference width="800" height="600"></canvas>

@code {
    ElementReference chartReference;

    [Parameter]
    public string? Start { get; set; }

    string currentSequence = string.Empty;
    string[] labels = Array.Empty<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var stream = new StreamReader(e.File.OpenReadStream(e.File.Size));
        var content = await stream.ReadLineAsync();

        if (BigInteger.TryParse(content, out var value))
        {
            this.Start = content;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrWhiteSpace(this.Start))
            {
                var startValue = await localStorage.GetItemAsync<string>(
                    $"{nameof(Sequence)}.{nameof(Start)}");

                if (!string.IsNullOrWhiteSpace(startValue))
                {
                    this.Start = startValue;
                }
            }

            if (!string.IsNullOrWhiteSpace(this.Start))
            {
                await this.CreateSequenceAsync();
            }
        }
    }

    private async Task CreateSequenceAsync()
    {
        var module = await this.JSRuntime.InvokeAsync<IJSObjectReference>(
             Constants.Import, Constants.ChartsFileLocation);

        if (BigInteger.TryParse(this.Start, out var value))
        {
            try
            {
                var sequence = CollatzSequenceGenerator.Generate(value);
                this.currentSequence = string.Join(", ", sequence);
                this.labels = Enumerable.Range(1, sequence.Length).Select(_ => _.ToString()).ToArray();
                await localStorage.SetItemAsync(
                    $"{nameof(Sequence)}.{nameof(Start)}", this.Start);
                await module.InvokeAsync<object>(Constants.ChartsMethod,
                    this.chartReference,
                    sequence.Select(_ => (int)_).ToArray(), this.labels);
            }
            catch (ArgumentException)
            {
                this.currentSequence = $"The value, {value}, is incorrect.";
                this.labels = Array.Empty<string>();
                await module.InvokeAsync<object>(Constants.ChartsMethod,
                    this.chartReference,
                    Array.Empty<int>(), Array.Empty<string>());
            }
        }
        else
        {
            this.currentSequence = $"{this.Start} is not a valid integer.";
            this.labels = Array.Empty<string>();
            await module.InvokeAsync<object>(Constants.ChartsMethod, this.chartReference,
                Array.Empty<int>(), Array.Empty<string>());
        }

        this.StateHasChanged();
    }
}