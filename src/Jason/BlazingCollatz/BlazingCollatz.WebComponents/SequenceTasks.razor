@using Collatz;
@using Spackle
@using System.Diagnostics
@using System.Numerics

@page "/sequence-tasks"

<h1>Sequence - Tasks</h1>

<button class="btn btn-primary" @onclick="this.OnCreateSequenceSequentially">Find Longest Sequence Sequentially</button>
<p>Results: @this.sequentialResults</p>

<button class="btn btn-primary" @onclick="this.OnCreateSequenceInParallel">Find Longest Sequence in Parallel</button>
<p>Results: @this.parallelResults</p>

@code {
    string parallelResults = string.Empty;
    string sequentialResults = string.Empty;
    private Range<int> range = new Range<int>(50_000, 60_000);

    public void OnCreateSequenceSequentially()
    {
        var stopwatch = Stopwatch.StartNew();
        var result = SequenceTasks.FindLongestSequence(this.range);
        stopwatch.Stop();

        this.sequentialResults = $"Longest sequence in range {range} is {result.sequenceLength} for {result.value} - Elapsed time is {stopwatch.Elapsed}";
        this.StateHasChanged();
    }

    public void OnCreateSequenceInParallel()
    {
        var stopwatch = Stopwatch.StartNew();
        var tasks = new List<Task<(BigInteger value, int sequenceLength)>>();
        var ranges = range.Partition(Environment.ProcessorCount);

        for (var i = 0; i < Environment.ProcessorCount; i++)
        {
            var r = ranges[i];
            tasks.Add(Task.Run(() => FindLongestSequence(r)));
        }

        Task.WaitAll(tasks.ToArray());
        (BigInteger value, int sequenceLength) result = (BigInteger.Zero, 0);

        foreach (var task in tasks)
        {
            var taskResult = task.Result;
            if (taskResult.sequenceLength > result.sequenceLength)
            {
                result = taskResult;
            }
        }

        stopwatch.Stop();

        this.parallelResults = $"Longest sequence in range {range} is {result.sequenceLength} for {result.value} - Elapsed time is {stopwatch.Elapsed} - processor count is {Environment.ProcessorCount}";
        this.StateHasChanged();
    }

    private static (BigInteger value, int sequenceLength) FindLongestSequence(Range<int> range)
    {
        (BigInteger value, int sequenceLength) result = (BigInteger.Zero, 0);

        for (var i = range.Start; i < range.End; i++)
        {
            var sequence = CollatzSequenceGenerator.Generate(i);

            if (sequence.Length > result.sequenceLength)
            {
                result = (i, sequence.Length);
            }
        }

        return result;
    }
}