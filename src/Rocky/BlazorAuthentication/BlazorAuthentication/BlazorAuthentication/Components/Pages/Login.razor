@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div>
    <EditForm Model="userInfo" OnSubmit="LoginUser" FormName="loginform">
        <div>
            <label>Username</label>
            <InputText @bind-Value="userInfo.Username" />
        </div>
        <div>
            <label>Password</label>
            <InputText type="password" @bind-Value="userInfo.Password" />
        </div>
        <button>Login</button>
    </EditForm>
</div>

<div style="background-color:lightgray">
    <p>User identities:</p>
    <p>admin, admin</p>
</div>

<div><p class="alert-danger">@Message</p></div>

@code {

    [SupplyParameterFromForm]
    public UserInfo userInfo { get; set; } = new();

    public string Message { get; set; } = "";

    private async Task LoginUser()
    {
        Message = "";
        ClaimsPrincipal principal;
        if (userInfo.Username == "admin" && userInfo.Password == "admin")
        {
            // create authenticated principal
            var identity = new ClaimsIdentity("custom");
            var claims = new List<Claim>();
            claims.Add(new Claim(ClaimTypes.Name, userInfo.Username, ClaimValueTypes.String));
            claims.Add(new Claim(ClaimTypes.Role, "admin", ClaimValueTypes.String));
            identity.AddClaims(claims);
            principal = new ClaimsPrincipal(identity);
            var httpContext = httpContextAccessor.HttpContext;
            if (httpContext is not null)
            {
                AuthenticationProperties authProperties = new AuthenticationProperties();
                await httpContext.SignInAsync(
                  CookieAuthenticationDefaults.AuthenticationScheme,
                  principal,
                  authProperties);
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            Message = "Invalid credentials";
            //StateHasChanged();
        }
    }


    public class UserInfo
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
